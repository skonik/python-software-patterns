<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python Software Patterns</title><link>https://skonik.github.io/python-software-patterns/</link><description/><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 27 May 2021 00:03:38 +0300</lastBuildDate><atom:link href="https://skonik.github.io/python-software-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Webhook handlers via decorators</title><link>https://skonik.github.io/python-software-patterns/posts/webhook-handler/</link><pubDate>Thu, 27 May 2021 00:03:38 +0300</pubDate><guid>https://skonik.github.io/python-software-patterns/posts/webhook-handler/</guid><description>Problem You have an external system(e.g payment gateway) sending events onto your backend http endpoint. There are several types of events have to be processed in different ways.
How to organize the code?
Possible solution Move processing of particular types into separate functions and register them via decorators.
Create a decorator that consumes parameter(e.g event) and stores a function in the dict or other container.
from functools import wraps event_handlers = dict() # Dict to store event -&amp;gt; func mappings def handler(event): def decorator(func): event_handlers[event] = func @wraps(func) def wrapper(data): result = func(data) return result return wrapper return decorator Write functions responsible for processing specific events and hang decorators on them.</description></item></channel></rss>